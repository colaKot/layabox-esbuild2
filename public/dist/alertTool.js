(()=>{function n(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}window.addEventListener("load",(function(){var e,t,o,i,d=function(){var n=document.createElement("div");n.innerHTML='\n        <div class="confirmEx">\n            <div class="bg"></div>\n            <div class="content">\n                <div class="mes">Ê∂àÊÅØ</div>\n                <div class="but">\n                    <button class="no">ÂèñÊ∂à‚ùå</button>\n                    <button class="yes">Á°ÆËÆ§‚úîÔ∏è</button>\n                </div>\n            </div>\n        </div>\n    ',n=document.body.appendChild(n.firstElementChild);var e,t=document.getElementsByClassName("confirmEx")[0],o=t.getElementsByClassName("bg")[0],i=t.getElementsByClassName("content")[0],d=t.getElementsByClassName("mes")[0],a=t.getElementsByClassName("yes")[0],s=t.getElementsByClassName("no")[0],r=!1;window.addEventListener("resize",(function(n){i.style.transform="scale(".concat(window.innerWidth/500,")")})),i.style.transform="scale(".concat(window.innerWidth/500,")"),window.addEventListener("keydown",(function(n){r&&"Enter"==n.key&&(e&&e(!0),c()),r&&"Escape"==n.key&&(e&&e(!1),c())}));var c=function(){r=!1,t.classList.remove("show")};return o.onclick=function(){e&&e(!1),c()},i.onclick=function(n){e&&e(!0),c(),n.stopPropagation()},a.onclick=function(n){e&&e(!0),c(),n.stopPropagation()},s.onclick=function(n){e&&e(!1),c(),n.stopPropagation()},function(n,o){r=!0,t.classList.add("show"),e=o,d.innerHTML=n}}();o=0,i=!1,new EventSource(esbuildTool.config.esbuildE).addEventListener("change",(function(e){var t,a,s,r=JSON.parse(e.data),c=r.added,l=r.removed,u=r.updated;c&&c.length>0?a="added":l&&l.length>0?a="removed":u&&u.length>0&&(a="updated"),o++,(t=console).log.apply(t,function(e){if(Array.isArray(e))return n(e)}(s=esbuildTool.consoleEx.pack(esbuildTool.consoleEx.getStyle("#eeeeee","#08d9d6"),a))||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(s)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(s)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),!i&&o>0&&(i=!0,d('\n          <div class="title">È°πÁõÆÂÜÖÂÆπÊúâÊõ¥Êñ∞ üîî</div>\n          <div class="content">ÁÇπÂáªÊ∂àÊÅØÊ°ÜÊàñÁÇπÂáªÁ°ÆËÆ§ÊåâÈíÆÊàñÊåâEnterÈîÆÂà∑Êñ∞È°µÈù¢ÔºåÁÇπÂáªËÉåÊôØÊàñÂèñÊ∂àÊåâÈíÆÂèñÊ∂àÊ≠§Ê¨°Êõ¥Êñ∞</div>\n          ',(function(n){o=0,i=!1,n&&location.reload()})))})),esbuildTool.config.ifUpdateNow&&(void 0!==document.hidden?(e="hidden",t="visibilitychange"):void 0!==document.msHidden?(e="msHidden",t="msvisibilitychange"):void 0!==document.webkitHidden&&(e="webkitHidden",t="webkitvisibilitychange"),void 0===document.addEventListener||void 0===document[e]?console.warn("ÂΩìÂâçÊµèËßàÂô®‰∏çËÉΩÂà§Êñ≠Á™óÂè£ÊòØÂê¶Ëé∑ÂèñÊàñÂ§±ÂéªÁÑ¶ÁÇπüò∞"):document.addEventListener(t,(function(){document[e]||o>0&&location.reload()}),!1))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,